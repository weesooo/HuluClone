{"version":3,"sources":["assests/Header.js","assests/requests.js","assests/Navigation.js","assests/MovieCard.js","assests/axios.js","assests/Movies.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","API_key","getHot","getTopRated","getActionMovies","getComedyMovies","getHorrorMovies","getRomanticMovies","getMysteryMovies","getSciFiMovies","getWesternMovies","getAnimationMovies","getTV","Navigation","setSelectedCategory","onClick","requests","MovieCard","film","backdrop_path","poster_path","line","element","truncateText","text","overview","title","original_name","vote_count","axios_instance","axios","create","baseURL","Movies","SelectedCategory","useState","films","setFilms","useEffect","a","get","request","data","results","console","log","getData","map","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9712758a.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css';\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport LiveTvIcon from \"@material-ui/icons/LiveTv\";\r\nimport VideoLibraryIcon from \"@material-ui/icons/VideoLibrary\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport PersonOutlineIcon from \"@material-ui/icons/PersonOutline\";\r\nimport WhatshotIcon from '@material-ui/icons/Whatshot';\r\n\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n      <div className=\"header\">\r\n        <div className=\"header_icons\">\r\n          {/* Icons Right here... all wrapped in divs */}\r\n          <div className=\"header_icon\">\r\n            <HomeIcon />\r\n            <p>Home</p>\r\n          </div>\r\n          <div className=\"header_icon\">\r\n            <WhatshotIcon />\r\n            <p>Hot titles</p>\r\n          </div>\r\n          <div className=\"header_icon\">\r\n            <LiveTvIcon />\r\n            <p>TV</p>\r\n          </div>\r\n          <div className=\"header_icon\">\r\n            <VideoLibraryIcon />\r\n            <p>Video</p>\r\n          </div>\r\n          <div className=\"header_icon\">\r\n            <SearchIcon />\r\n            <p>Search</p>\r\n          </div>\r\n          <div className=\"header_icon\">\r\n            <PersonOutlineIcon />\r\n            <p>Account</p>\r\n          </div>\r\n        </div>\r\n        <img\r\n          src=\"https://press.hulu.com/wp-content/uploads/2020/02/hulu-green-digital.png\"\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  \r\n\r\nexport default Header\r\n","//File name is requests instead of Requests because this is not a componenet for our React App\r\n// using TMBD API here to send get requests and recieve data back\r\nconst API_key = \"22c45eb9b20eb8dc33c07751c863c5b4\";\r\n\r\nexport default {\r\n  getHot: `/trending/all/week?api_key=${API_key}&language=en-US`,\r\n  getTopRated: `/movie/top_rated?api_key=${API_key}&language=en-US`,\r\n  getActionMovies: `/discover/movie?api_key=${API_key}&with_genres=28`,\r\n  getComedyMovies: `/discover/movie?api_key=${API_key}&with_genres=35`,\r\n  getHorrorMovies: `/discover/movie?api_key=${API_key}&with_genres=27`,\r\n  getRomanticMovies: `/discover/movie?api_key=${API_key}&with_genres=10749`,\r\n  getMysteryMovies: `/discover/movie?api_key=${API_key}&with_genres=9648`,\r\n  getSciFiMovies: `/discover/movie?api_key=${API_key}&with_genres=878`,\r\n  getWesternMovies: `/discover/movie?api_key=${API_key}&with_genres=37`,\r\n  getAnimationMovies: `/discover/movie?api_key=${API_key}&with_genres=16`,\r\n  getTV: `/discover/movie?api_key=${API_key}&with_genres=10770`,\r\n};\r\n","import React from 'react'\r\nimport './Navigation.css';\r\nimport requests from './requests';\r\n\r\n\r\n\r\nfunction Navigation({ setSelectedCategory }) {\r\n    return (\r\n        <div className='Navigation'>\r\n            <h2 onClick={() => setSelectedCategory(requests.getHot)}>Hot</h2>\r\n            <h2 onClick={() => setSelectedCategory(requests.getTopRated)}>Top Rated</h2>\r\n            <h2 onClick={() => setSelectedCategory(requests.getActionMovies)}>Action</h2>\r\n            <h2 onClick={() => setSelectedCategory(requests.getComedyMovies)}>Comedy</h2>\r\n            <h2 onClick={() => setSelectedCategory(requests.getRomanticMovies)}>Romance</h2>\r\n            <h2 onClick={() => setSelectedCategory(requests.getMysteryMovies)}>Mystery</h2>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navigation\r\n","import React from \"react\";\r\nimport \"./MovieCard.css\";\r\nimport TextTruncate from \"react-text-truncate\";\r\nimport ThumbUpAltIcon from \"@material-ui/icons/ThumbUpAlt\";\r\n\r\nconst ImageBaseURL = \"https://image.tmdb.org/t/p/original/\"; // get films images\r\nfunction MovieCard({ film }) {\r\n  return (\r\n    <div className=\"MovieCard\">\r\n      <img\r\n        src={`${ImageBaseURL}${film.backdrop_path || film.poster_path}`}\r\n        alt=\"film poster\"\r\n      />\r\n      {/* Using react-text-truncate to have ..... instead of full film */}\r\n      <TextTruncate\r\n        line={3}\r\n        element=\"p\"\r\n        truncateText=\"....\"\r\n        text={film.overview}\r\n      />\r\n      <h2>{film.title || film.original_name}</h2>\r\n      <p className=\"MovieCard_stats\">\r\n        <ThumbUpAltIcon />\r\n        {film.vote_count}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MovieCard;\r\n","import axios from \"axios\";\r\n\r\n//Base URL\r\nconst axios_instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default axios_instance;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Movies.css\";\r\nimport \"./MovieCard\";\r\nimport MovieCard from \"./MovieCard\";\r\nimport axios from \"./axios\";\r\n\r\nfunction Movies({ SelectedCategory }) {\r\n  // Using React hooks --> useState and useEffect\r\n  const [films, setFilms] = useState([]); //Empty Array for rendering the MovieCard componenet\r\n\r\n  //Connecting the data from API request to our React front-end using UseEffect and async to\r\n\r\n  useEffect(() => {\r\n    async function getData() {\r\n      const request = await axios.get(SelectedCategory);\r\n      setFilms(request.data.results);\r\n      console.log(request); //Testing to see if I'm getting a response back\r\n      return request;\r\n    }\r\n\r\n    getData();\r\n  },[SelectedCategory]);\r\n\r\n  return (\r\n    <div className=\"movies\">\r\n      {films.map((film) => (\r\n        <MovieCard key={film.id} film={film} /> // Mapping data to MovieCard componenet using props\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Movies;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./assests/Header.js\";\nimport Header from \"./assests/Header.js\";\nimport Navigation from \"./assests/Navigation.js\";\nimport Movies from \"./assests/Movies\";\nimport { useState } from \"react\";\nimport requests from \"./assests/requests.js\";\n// Tech ---> Material UI | TMDB API endpoints | React Hooks State, Effect | Flexbox (CSS)\nfunction App() {\n  const [SelectedCategory, setSelectedCategory] = useState(requests.getHot);\n  return (\n    <div className=\"app\">\n      {/* Header Componenet */}\n\n      <Header />\n\n      {/* Navigation Componenet */}\n\n      <Navigation setSelectedCategory={setSelectedCategory} />\n\n      {/* Movie Results Componenet*/}\n\n      <Movies SelectedCategory={SelectedCategory} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}